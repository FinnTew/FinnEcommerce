// Code generated by Kitex v0.9.1. DO NOT EDIT.

package shortlinkservice

import (
	"context"
	"errors"
	shortlink "github.com/FinnTew/FinnEcommerce/src/internal/client/kitex_gen/shortlink"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateShortLink": kitex.NewMethodInfo(
		createShortLinkHandler,
		newCreateShortLinkArgs,
		newCreateShortLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLongLink": kitex.NewMethodInfo(
		getLongLinkHandler,
		newGetLongLinkArgs,
		newGetLongLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	shortLinkServiceServiceInfo                = NewServiceInfo()
	shortLinkServiceServiceInfoForClient       = NewServiceInfoForClient()
	shortLinkServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return shortLinkServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return shortLinkServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return shortLinkServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ShortLinkService"
	handlerType := (*shortlink.ShortLinkService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "shortlink",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createShortLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shortlink.CreateShortLinkRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shortlink.ShortLinkService).CreateShortLink(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateShortLinkArgs:
		success, err := handler.(shortlink.ShortLinkService).CreateShortLink(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateShortLinkResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateShortLinkArgs() interface{} {
	return &CreateShortLinkArgs{}
}

func newCreateShortLinkResult() interface{} {
	return &CreateShortLinkResult{}
}

type CreateShortLinkArgs struct {
	Req *shortlink.CreateShortLinkRequest
}

func (p *CreateShortLinkArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shortlink.CreateShortLinkRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateShortLinkArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateShortLinkArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateShortLinkArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateShortLinkArgs) Unmarshal(in []byte) error {
	msg := new(shortlink.CreateShortLinkRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateShortLinkArgs_Req_DEFAULT *shortlink.CreateShortLinkRequest

func (p *CreateShortLinkArgs) GetReq() *shortlink.CreateShortLinkRequest {
	if !p.IsSetReq() {
		return CreateShortLinkArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateShortLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateShortLinkArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateShortLinkResult struct {
	Success *shortlink.CreateShortLinkResponse
}

var CreateShortLinkResult_Success_DEFAULT *shortlink.CreateShortLinkResponse

func (p *CreateShortLinkResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shortlink.CreateShortLinkResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateShortLinkResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateShortLinkResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateShortLinkResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateShortLinkResult) Unmarshal(in []byte) error {
	msg := new(shortlink.CreateShortLinkResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateShortLinkResult) GetSuccess() *shortlink.CreateShortLinkResponse {
	if !p.IsSetSuccess() {
		return CreateShortLinkResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateShortLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*shortlink.CreateShortLinkResponse)
}

func (p *CreateShortLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateShortLinkResult) GetResult() interface{} {
	return p.Success
}

func getLongLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shortlink.GetLongLinkRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shortlink.ShortLinkService).GetLongLink(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLongLinkArgs:
		success, err := handler.(shortlink.ShortLinkService).GetLongLink(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLongLinkResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLongLinkArgs() interface{} {
	return &GetLongLinkArgs{}
}

func newGetLongLinkResult() interface{} {
	return &GetLongLinkResult{}
}

type GetLongLinkArgs struct {
	Req *shortlink.GetLongLinkRequest
}

func (p *GetLongLinkArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shortlink.GetLongLinkRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLongLinkArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLongLinkArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLongLinkArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLongLinkArgs) Unmarshal(in []byte) error {
	msg := new(shortlink.GetLongLinkRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLongLinkArgs_Req_DEFAULT *shortlink.GetLongLinkRequest

func (p *GetLongLinkArgs) GetReq() *shortlink.GetLongLinkRequest {
	if !p.IsSetReq() {
		return GetLongLinkArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLongLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLongLinkArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLongLinkResult struct {
	Success *shortlink.GetLongLinkResponse
}

var GetLongLinkResult_Success_DEFAULT *shortlink.GetLongLinkResponse

func (p *GetLongLinkResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shortlink.GetLongLinkResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLongLinkResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLongLinkResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLongLinkResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLongLinkResult) Unmarshal(in []byte) error {
	msg := new(shortlink.GetLongLinkResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLongLinkResult) GetSuccess() *shortlink.GetLongLinkResponse {
	if !p.IsSetSuccess() {
		return GetLongLinkResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLongLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*shortlink.GetLongLinkResponse)
}

func (p *GetLongLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLongLinkResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateShortLink(ctx context.Context, Req *shortlink.CreateShortLinkRequest) (r *shortlink.CreateShortLinkResponse, err error) {
	var _args CreateShortLinkArgs
	_args.Req = Req
	var _result CreateShortLinkResult
	if err = p.c.Call(ctx, "CreateShortLink", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLongLink(ctx context.Context, Req *shortlink.GetLongLinkRequest) (r *shortlink.GetLongLinkResponse, err error) {
	var _args GetLongLinkArgs
	_args.Req = Req
	var _result GetLongLinkResult
	if err = p.c.Call(ctx, "GetLongLink", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
