// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package shortlink

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateShortLinkRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShortLinkRequest[number], err)
}

func (x *CreateShortLinkRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LongLink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateShortLinkRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CustomSlug, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateShortLinkRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ExpirationSeconds, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateShortLinkResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShortLinkResponse[number], err)
}

func (x *CreateShortLinkResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShortLink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLongLinkRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLongLinkRequest[number], err)
}

func (x *GetLongLinkRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShortLink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLongLinkResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLongLinkResponse[number], err)
}

func (x *GetLongLinkResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LongLink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLongLinkResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Expired, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateShortLinkRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateShortLinkRequest) fastWriteField1(buf []byte) (offset int) {
	if x.LongLink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLongLink())
	return offset
}

func (x *CreateShortLinkRequest) fastWriteField2(buf []byte) (offset int) {
	if x.CustomSlug == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCustomSlug())
	return offset
}

func (x *CreateShortLinkRequest) fastWriteField3(buf []byte) (offset int) {
	if x.ExpirationSeconds == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetExpirationSeconds())
	return offset
}

func (x *CreateShortLinkResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateShortLinkResponse) fastWriteField1(buf []byte) (offset int) {
	if x.ShortLink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetShortLink())
	return offset
}

func (x *GetLongLinkRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLongLinkRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ShortLink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetShortLink())
	return offset
}

func (x *GetLongLinkResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLongLinkResponse) fastWriteField1(buf []byte) (offset int) {
	if x.LongLink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLongLink())
	return offset
}

func (x *GetLongLinkResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.Expired {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetExpired())
	return offset
}

func (x *CreateShortLinkRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateShortLinkRequest) sizeField1() (n int) {
	if x.LongLink == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLongLink())
	return n
}

func (x *CreateShortLinkRequest) sizeField2() (n int) {
	if x.CustomSlug == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCustomSlug())
	return n
}

func (x *CreateShortLinkRequest) sizeField3() (n int) {
	if x.ExpirationSeconds == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetExpirationSeconds())
	return n
}

func (x *CreateShortLinkResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateShortLinkResponse) sizeField1() (n int) {
	if x.ShortLink == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetShortLink())
	return n
}

func (x *GetLongLinkRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLongLinkRequest) sizeField1() (n int) {
	if x.ShortLink == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetShortLink())
	return n
}

func (x *GetLongLinkResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLongLinkResponse) sizeField1() (n int) {
	if x.LongLink == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLongLink())
	return n
}

func (x *GetLongLinkResponse) sizeField2() (n int) {
	if !x.Expired {
		return n
	}
	n += fastpb.SizeBool(2, x.GetExpired())
	return n
}

var fieldIDToName_CreateShortLinkRequest = map[int32]string{
	1: "LongLink",
	2: "CustomSlug",
	3: "ExpirationSeconds",
}

var fieldIDToName_CreateShortLinkResponse = map[int32]string{
	1: "ShortLink",
}

var fieldIDToName_GetLongLinkRequest = map[int32]string{
	1: "ShortLink",
}

var fieldIDToName_GetLongLinkResponse = map[int32]string{
	1: "LongLink",
	2: "Expired",
}
