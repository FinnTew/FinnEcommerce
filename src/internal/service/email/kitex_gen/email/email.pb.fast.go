// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package email

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Recipient) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Recipient[number], err)
}

func (x *Recipient) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Recipient) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEmailRequest[number], err)
}

func (x *SendEmailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Recipient
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.To = append(x.To, &v)
	return offset, nil
}

func (x *SendEmailRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Recipient
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cc = append(x.Cc, &v)
	return offset, nil
}

func (x *SendEmailRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Recipient
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Bcc = append(x.Bcc, &v)
	return offset, nil
}

func (x *SendEmailRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Subject, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Body, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FromName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.FromEmail, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEmailResponse[number], err)
}

func (x *SendEmailResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MessageId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SendEmailResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Recipient) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Recipient) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *Recipient) fastWriteField2(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetEmail())
	return offset
}

func (x *SendEmailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *SendEmailRequest) fastWriteField1(buf []byte) (offset int) {
	if x.To == nil {
		return offset
	}
	for i := range x.GetTo() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTo()[i])
	}
	return offset
}

func (x *SendEmailRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Cc == nil {
		return offset
	}
	for i := range x.GetCc() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetCc()[i])
	}
	return offset
}

func (x *SendEmailRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Bcc == nil {
		return offset
	}
	for i := range x.GetBcc() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetBcc()[i])
	}
	return offset
}

func (x *SendEmailRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Subject == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetSubject())
	return offset
}

func (x *SendEmailRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Body == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetBody())
	return offset
}

func (x *SendEmailRequest) fastWriteField6(buf []byte) (offset int) {
	if x.FromName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFromName())
	return offset
}

func (x *SendEmailRequest) fastWriteField7(buf []byte) (offset int) {
	if x.FromEmail == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetFromEmail())
	return offset
}

func (x *SendEmailResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SendEmailResponse) fastWriteField1(buf []byte) (offset int) {
	if x.MessageId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessageId())
	return offset
}

func (x *SendEmailResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetSuccess())
	return offset
}

func (x *SendEmailResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetError())
	return offset
}

func (x *Recipient) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Recipient) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *Recipient) sizeField2() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetEmail())
	return n
}

func (x *SendEmailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *SendEmailRequest) sizeField1() (n int) {
	if x.To == nil {
		return n
	}
	for i := range x.GetTo() {
		n += fastpb.SizeMessage(1, x.GetTo()[i])
	}
	return n
}

func (x *SendEmailRequest) sizeField2() (n int) {
	if x.Cc == nil {
		return n
	}
	for i := range x.GetCc() {
		n += fastpb.SizeMessage(2, x.GetCc()[i])
	}
	return n
}

func (x *SendEmailRequest) sizeField3() (n int) {
	if x.Bcc == nil {
		return n
	}
	for i := range x.GetBcc() {
		n += fastpb.SizeMessage(3, x.GetBcc()[i])
	}
	return n
}

func (x *SendEmailRequest) sizeField4() (n int) {
	if x.Subject == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetSubject())
	return n
}

func (x *SendEmailRequest) sizeField5() (n int) {
	if x.Body == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetBody())
	return n
}

func (x *SendEmailRequest) sizeField6() (n int) {
	if x.FromName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFromName())
	return n
}

func (x *SendEmailRequest) sizeField7() (n int) {
	if x.FromEmail == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetFromEmail())
	return n
}

func (x *SendEmailResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SendEmailResponse) sizeField1() (n int) {
	if x.MessageId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessageId())
	return n
}

func (x *SendEmailResponse) sizeField2() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(2, x.GetSuccess())
	return n
}

func (x *SendEmailResponse) sizeField3() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetError())
	return n
}

var fieldIDToName_Recipient = map[int32]string{
	1: "Name",
	2: "Email",
}

var fieldIDToName_SendEmailRequest = map[int32]string{
	1: "To",
	2: "Cc",
	3: "Bcc",
	4: "Subject",
	5: "Body",
	6: "FromName",
	7: "FromEmail",
}

var fieldIDToName_SendEmailResponse = map[int32]string{
	1: "MessageId",
	2: "Success",
	3: "Error",
}
